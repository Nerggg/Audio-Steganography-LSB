// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/capacity": {
            "post": {
                "description": "Calculates the maximum size of a secret file (in bytes) that can be embedded into an uploaded audio file (MP3 or WAV) using the multiple-LSB method. The capacity is returned for 1, 2, 3, and 4 LSBs.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Steganography"
                ],
                "summary": "Calculate Audio Embedding Capacity",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Audio file (MP3 or WAV) to calculate capacity for.",
                        "name": "audio",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully calculated embedding capacity.",
                        "schema": {
                            "$ref": "#/definitions/handlers.CapacityResponse"
                        },
                        "headers": {
                            "X-Processing-Time": {
                                "type": "int",
                                "description": "Time taken to process the request in milliseconds"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: No file uploaded, file is not MP3/WAV, or file is corrupted.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "413": {
                        "description": "File too large",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to process the file.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/embed": {
            "post": {
                "description": "Embeds a secret file into the provided audio file using n-LSB steganography. Supports optional Vigenère encryption and random embedding start using a stego key. Metadata (filename, format, size, method, flags) is automatically stored inside the stego file.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "audio/mpeg"
                ],
                "tags": [
                    "Steganography"
                ],
                "summary": "Embed secret file into audio",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Cover audio file (MP3)",
                        "name": "audio",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Secret file to embed",
                        "name": "secret",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of LSBs to use (1-4)",
                        "name": "lsb",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Key for encryption and/or random start",
                        "name": "stego_key",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Enable Vigenère encryption",
                        "name": "use_encryption",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Enable random start embedding",
                        "name": "use_random_start",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Output stego audio filename",
                        "name": "output_filename",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stego audio file with embedded secret",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Processing error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/extract": {
            "post": {
                "description": "Extracts a secret file that was previously embedded in an audio file using n-LSB steganography. Supports optional Vigenère decryption and random start. Automatically restores original filename and metadata.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Steganography"
                ],
                "summary": "Extract secret file from audio",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Stego audio file (MP3 with embedded data)",
                        "name": "stego_audio",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Key for decryption and/or random start",
                        "name": "stego_key",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional output filename override",
                        "name": "output_filename",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Extracted secret file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Extraction error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the health status of the API service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.CapacityResponse": {
            "type": "object",
            "properties": {
                "capacities": {
                    "$ref": "#/definitions/models.CapacityResult"
                },
                "file_info": {
                    "$ref": "#/definitions/handlers.FileInfo"
                },
                "processing_time_ms": {
                    "type": "integer"
                }
            }
        },
        "handlers.FileInfo": {
            "type": "object",
            "properties": {
                "bitrate": {
                    "type": "integer"
                },
                "channels": {
                    "type": "integer"
                },
                "duration_seconds": {
                    "type": "number"
                },
                "filename": {
                    "type": "string"
                },
                "sample_rate": {
                    "type": "integer"
                },
                "size_bytes": {
                    "type": "integer"
                }
            }
        },
        "handlers.HealthResponse": {
            "type": "object",
            "properties": {
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "uptime": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.CapacityResult": {
            "type": "object",
            "properties": {
                "1_lsb": {
                    "type": "integer"
                },
                "2_lsb": {
                    "type": "integer"
                },
                "3_lsb": {
                    "type": "integer"
                },
                "4_lsb": {
                    "type": "integer"
                }
            }
        },
        "models.ErrorDetail": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/models.ErrorDetail"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
